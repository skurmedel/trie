{"tagline":"Various trie implementations.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# trie\r\n\r\nImplementations of a trie in various languages.\r\n\r\nThis project used to reside at [bitbucket](https://bitbucket.org/skurmedel/trie) but is now hosted here.\r\n\r\n## Current status\r\n\r\nRight now, there's just an implementation for Python. But it works quite well.\r\n\r\n### Python\r\n\r\nThe Python implementation is very simple and quite speedy. If you find a way to make it quicker (without making a C-lib), please contribute to the project.\r\n\r\nTo use it, `import trie` and create a new Trie with `trie.Trie()`.\r\n\r\nIt supports the following actions, `insert`, `contains` and `find_by_prefix`.\r\n\r\nThe constructor may optionally take an iterable of strings, that will be `insert`:ed.\r\n\r\n## License\r\n\r\nSee individual files for license, some files like the bundled dictionaries are not made by me and thus have other license requirements.\r\n\r\nIn general, the actual implementations themselves are under New BSD-style or MIT-licenses.","name":"Trie"}